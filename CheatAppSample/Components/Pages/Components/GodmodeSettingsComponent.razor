@using CheatAppSample.Data.Services
@using CheatEngineP1.Entities
@using CheatEngineP1.Interfaces

@inject IProcessMemoryWriter CheatWriterService
@inject ServiceDataUpdater ServiceDataUpdater

<MudPaper Elevation="5" Class="p-4" MaxWidth="400px">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudText Align="Align.Center" Typo="Typo.h5">God mode settings</MudText>
        </MudItem>
            
        <MudItem xs="12" sm="6">
            <MudCard Elevation="5">
                <MudCardHeader Class="d-flex justify-center text-center">
                    <MudTooltip Text="Prevent from loosing Hunger">
                        <MudText Typo="Typo.body1">Inf Hunger</MudText>
                    </MudTooltip>
                </MudCardHeader>
                <MudCardActions Class="d-flex justify-center">
                    @if (_enableStopLoosingHunger)
                    {
                        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="ToggleEnablePreventLoosingHunger">Disable</MudButton>
                    }
                    else
                    {
                        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="ToggleEnablePreventLoosingHunger">Enable</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudCard Elevation="5">
                <MudCardHeader Class="d-flex justify-center text-center">
                    <MudTooltip Text="Prevent from loosing Health">
                        <MudText Typo="Typo.body1">Inf Health</MudText>
                    </MudTooltip>
                </MudCardHeader>
                <MudCardActions Class="d-flex justify-center">
                    @if (_enableStopLoosingHealth)
                    {
                        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="ToggleEnablePreventLoosingHealth">Disable</MudButton>
                    }
                    else
                    {
                        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="ToggleEnablePreventLoosingHealth">Enable</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudPaper>

@code
{
    private ProcessMemoryPointerPath _hungerPointer = new(0x08C29800, [0x178, 0x170, 0xBB8, 0x130, 0x28, 0x128, 0x3FC]);
    private readonly int _hungerMaxValue = 1120403456;
    private bool _enableStopLoosingHunger;
    
    // TODO: Implement offsets to current health
    private ProcessMemoryPointerPath _healthPointer = new(0x0, []);
    private readonly int _healthMaxValue = 1;
    private bool _enableStopLoosingHealth;

    protected override void OnInitialized()
    {
        ServiceDataUpdater.OnUpdate += CheckAndSetMaxHungerIfEnabled;
    }

    private void CheckAndSetMaxHungerIfEnabled()
    {
        if (_enableStopLoosingHunger && ServiceDataUpdater.IsServiceStarted)
            CheatWriterService.WritePointerValue(_hungerPointer, null, _hungerMaxValue);
    }
    
    private void ToggleEnablePreventLoosingHunger()
    {
        _enableStopLoosingHunger = !_enableStopLoosingHunger;
        StateHasChanged();
    }

    private void ToggleEnablePreventLoosingHealth()
    {
        _enableStopLoosingHealth = !_enableStopLoosingHealth;
        StateHasChanged();
    }
}
