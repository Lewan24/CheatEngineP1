@using CheatAppSample.Components.Pages.Dialogs
@using CheatAppSample.Data.Services
@using CheatEngineP1.Entities
@using CheatEngineP1.Interfaces

@inject ServiceDataUpdater ServiceDataUpdater
@inject IProcessMemoryReader CheatServiceReader
@inject IDialogService DialogService

<MudItem xs="6" sm="3">
    <MudCard Elevation="5">
        <MudCardHeader>
            <MudText Typo="Typo.body1" Align="Align.Center">@Header</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudText Align="Align.Center" Typo="Typo.h6">@_value</MudText>
        </MudCardContent>
        <MudCardActions Class="d-flex justify-center">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="@(!ServiceDataUpdater.IsServiceStarted)" OnClick="@OpenEditStatValueDialog">Change</MudButton>
        </MudCardActions>
    </MudCard>
</MudItem>

@code{
    [Parameter] public required string Header { get; set; }
    [Parameter] public required ProcessMemoryPointerPath Pointer { get; set; }

    private int _value;

    protected override void OnInitialized()
    {
        ServiceDataUpdater.OnUpdate += UpdateValue;
    }

    private void UpdateValue()
    {
        if (!ServiceDataUpdater.IsServiceStarted)
            return;
        
        _value = CheatServiceReader.ReadMemoryValue<int>(Pointer);
        StateHasChanged();
    }

    private async Task OpenEditStatValueDialog()
    {
        var dialogParameters = new DialogParameters<EditPointerValueDialog>
        {
            { x => x.Pointer, Pointer}
        };

        await DialogService.ShowAsync<EditPointerValueDialog>("Change Stat Value", dialogParameters);
    }
}